// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "pdfviewer.h"

/////////////////////////////////////////////////////////////////////////////
// CPDFViewer

IMPLEMENT_DYNCREATE(CPDFViewer, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CPDFViewer properties

short CPDFViewer::GetTotalPage()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}

void CPDFViewer::SetTotalPage(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}

unsigned long CPDFViewer::GetBackgroudColor()
{
	unsigned long result;
	GetProperty(0x10, VT_I4, (void*)&result);
	return result;
}

void CPDFViewer::SetBackgroudColor(unsigned long propVal)
{
	SetProperty(0x10, VT_I4, propVal);
}

CString CPDFViewer::GetLicenseKey()
{
	CString result;
	GetProperty(0x13, VT_BSTR, (void*)&result);
	return result;
}

void CPDFViewer::SetLicenseKey(LPCTSTR propVal)
{
	SetProperty(0x13, VT_BSTR, propVal);
}

float CPDFViewer::GetRotateAngle()
{
	float result;
	GetProperty(0x16, VT_R4, (void*)&result);
	return result;
}

void CPDFViewer::SetRotateAngle(float propVal)
{
	SetProperty(0x16, VT_R4, propVal);
}

CString CPDFViewer::GetPassword()
{
	CString result;
	GetProperty(0x17, VT_BSTR, (void*)&result);
	return result;
}

void CPDFViewer::SetPassword(LPCTSTR propVal)
{
	SetProperty(0x17, VT_BSTR, propVal);
}

BOOL CPDFViewer::GetEnablePanning()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CPDFViewer::SetEnablePanning(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

double CPDFViewer::GetZoom()
{
	double result;
	GetProperty(0x2a, VT_R8, (void*)&result);
	return result;
}

void CPDFViewer::SetZoom(double propVal)
{
	SetProperty(0x2a, VT_R8, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CPDFViewer operations

void CPDFViewer::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPDFViewer::LoadPDFFile(LPCTSTR strPDFFile)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strPDFFile);
	return result;
}

void CPDFViewer::GoToPage(short iPage)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 iPage);
}

void CPDFViewer::GoToNextPage()
{
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPDFViewer::SearchPrevText()
{
	short result;
	InvokeHelper(0x5, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

short CPDFViewer::SearchNextText()
{
	short result;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

void CPDFViewer::ShowOriginalSize()
{
	InvokeHelper(0x7, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPDFViewer::SaveBitmaps(LPCTSTR strSaveFileName)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strSaveFileName);
	return result;
}

void CPDFViewer::PDFZoomIn()
{
	InvokeHelper(0xe, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPDFViewer::PDFZoomOut()
{
	InvokeHelper(0xf, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPDFViewer::PDFPrint()
{
	InvokeHelper(0x11, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPDFViewer::GoToPrevPage()
{
	InvokeHelper(0x12, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPDFViewer::PDFClose()
{
	InvokeHelper(0x14, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPDFViewer::Search(LPCTSTR strSearchText, BOOL bBackward)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_BOOL;
	InvokeHelper(0x18, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strSearchText, bBackward);
	return result;
}

void CPDFViewer::FitHeight()
{
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPDFViewer::FitWidth()
{
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPDFViewer::PrinterCount()
{
	short result;
	InvokeHelper(0x1c, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

CString CPDFViewer::PrinterName(short iIndex)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms,
		iIndex);
	return result;
}

CString CPDFViewer::PrinterGetDefaultPrinterName()
{
	CString result;
	InvokeHelper(0x1e, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
	return result;
}

short CPDFViewer::PrinterGetPageCount()
{
	short result;
	InvokeHelper(0x1f, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
	return result;
}

BOOL CPDFViewer::PrinterSetPageRange(short iFirstPage, short iLastPage)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x20, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iFirstPage, iLastPage);
	return result;
}

BOOL CPDFViewer::PrinterShowPageSetupDlg(long iOwnerHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iOwnerHandle);
	return result;
}

BOOL CPDFViewer::PrinterSetPrinterName(LPCTSTR strPrinterName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x22, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPrinterName);
	return result;
}

BOOL CPDFViewer::PrinterShowPrintDlg(long iOwnerHandle)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x23, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iOwnerHandle);
	return result;
}

BOOL CPDFViewer::PrinterSetPageOrientation(short iMode)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		iMode);
	return result;
}

BOOL CPDFViewer::PrinterOpenPDF(LPCTSTR strFile)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strFile);
	return result;
}

void CPDFViewer::PrinterClosePDF()
{
	InvokeHelper(0x26, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CPDFViewer::FitWindow()
{
	InvokeHelper(0x27, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

short CPDFViewer::SaveBitmapsBySize(LPCTSTR strSaveFileName, short iPageNo, double iScale)
{
	short result;
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_R8;
	InvokeHelper(0x28, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		strSaveFileName, iPageNo, iScale);
	return result;
}

BOOL CPDFViewer::IsEncrypted()
{
	BOOL result;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}
